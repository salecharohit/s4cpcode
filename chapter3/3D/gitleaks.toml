# Title for the gitleaks configuration file.
title = "s4cp"

# Extend the base (this) configuration. When you extend a configuration
# the base rules take precendence over the extended rules. I.e, if there are
# duplicate rules in both the base configuration and the extended configuration
# the base rules will override the extended rules.
# Another thing to know with extending configurations is you can chain together
# multiple configuration files to a depth of 2. Allowlist arrays are appended
# and can contain duplicates.
# useDefault and path can NOT be used at the same time. Choose one.
[extend]
# useDefault will extend the base configuration with the default gitleaks config:
# https://github.com/zricethezav/gitleaks/blob/master/config/gitleaks.toml
useDefault = true

# An array of tables that contain information that define instructions
# on how to detect secrets
[[rules]]
description = "This Rule will detect Hibernate Passwords stored in properties file"
id = "detect-spring-hibernate-password"
regex = "spring\\.datasource\\.password\\s*=\\s*\"([^\\\"]+)\""
keywords = [
    "spring",
    "boot",
    "hibernate"
]

# # Float representing the minimum shannon entropy a regex group must have to be considered a secret.
# entropy = 3.5

# # Keywords are used for pre-regex check filtering. Rules that contain
# # keywords will perform a quick string compare check to make sure the
# # keyword(s) are in the content being scanned. Ideally these values should
# # either be part of the idenitifer or unique strings specific to the rule's regex
# # (introduced in v8.6.0)
# keywords = [
#   "auth",
#   "password",
#   "token",
# ]

# # You can include an allowlist table for a single rule to reduce false positives or ignore commits
# # with known/rotated secrets
# [rules.allowlist]
# description = "ignore commit A"
# commits = [ "commit-A", "commit-B"]
# paths = [
#   '''go\.mod''',
#   '''go\.sum'''
# ]
# # note: (rule) regexTarget defaults to check the _Secret_ in the finding.
# # if regexTarget is not specified then _Secret_ will be used.
# # Acceptable values for regexTarget are "match" and "line"
# regexTarget = "match"
# regexes = [
#   '''process''',
#   '''getenv''',
# ]
# # note: stopwords targets the extracted secret, not the entire regex match
# # like 'regexes' does. (stopwords introduced in 8.8.0)
# stopwords = [
#   '''client''',
#   '''endpoint''',
# ]


# # This is a global allowlist which has a higher order of precedence than rule-specific allowlists.
# # If a commit listed in the `commits` field below is encountered then that commit will be skipped and no
# # secrets will be detected for said commit. The same logic applies for regexes and paths.
# [allowlist]
# description = "global allow list"
# commits = [ "commit-A", "commit-B", "commit-C"]
# paths = [
#   '''gitleaks\.toml''',
#   '''(.*?)(jpg|gif|doc)'''
# ]

# # note: (global) regexTarget defaults to check the _Secret_ in the finding.
# # if regexTarget is not specified then _Secret_ will be used.
# # Acceptable values for regexTarget are "match" and "line"
# regexTarget = "match"

# regexes = [
#   '''219-09-9999''',
#   '''078-05-1120''',
#   '''(9[0-9]{2}|666)-\d{2}-\d{4}''',
# ]
# # note: stopwords targets the extracted secret, not the entire regex match
# # like 'regexes' does. (stopwords introduced in 8.8.0)
# stopwords = [
#   '''client''',
#   '''endpoint''',
# ]